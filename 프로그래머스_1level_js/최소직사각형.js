/**
 * 최소직사각형
 * 
 * 문제 설명
 * 
 * 명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 
 * 다양한 모양과 크기의 명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 
 * 지갑을 만들어야 합니다. 이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 
 * 모든 명함의 가로 길이와 세로 길이를 조사했습니다.
 * 
 * 아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.
 * 
 * 명함 번호	가로 길이	세로 길이
 * 1	60	50
 * 2	30	70
 * 3	60	30
 * 4	80	40
 * 가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 
 * 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다. 하지만 2번 명함을 
 * 가로로 눕혀 수납한다면 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 
 * 수납할 수 있습니다. 이때의 지갑 크기는 4000(=80 x 50)입니다.
 * 
 * 모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수를 완성해주세요.
 * 
 * 제한 사항
 * 
 * - sizes의 길이는 1 이상 10,000 이하입니다.
 *   sizes의 원소는 [w, h] 형식입니다.
 *   w는 명함의 가로 길이를 나타냅니다.
 *   h는 명함의 세로 길이를 나타냅니다.
 *   w와 h는 1 이상 1,000 이하인 자연수입니다.
 * 
 * 입출력 예시
 * 
 *        sizes	                             result
 * [[60, 50], [30, 70], [60, 30], [80, 40]]	4000
 * [[10, 7], [12, 3], [8, 15], [14, 7], [5, 15]]	120
 * [[14, 4], [19, 6], [6, 16], [18, 7], [7, 11]]	133
 * 
 * 입출력 예시 설명
 * 
 * ex1) 문제 예시와 같습니다.
 * 
 * ex2) 명함들을 적절히 회전시켜 겹쳤을 때, 3번째 명함(가로: 8, 세로: 15)이 
 *      다른 모든 명함보다 크기가 큽니다. 따라서 지갑의 크기는 3번째 명함의 
 *      크기와 같으며, 120(=8 x 15)을 return 합니다.
 * 
 * ex3) 명함들을 적절히 회전시켜 겹쳤을 때, 모든 명함을 
 *      포함하는 가장 작은 지갑의 크기는 133(=19 x 7)입니다.
 * 
 * 
 */

/**
 * 문제 해석
 * 
 * 명함의 긴변 중에서 가장 큰수 
 * 명함의 짧은변 중에서 가장 작은수
 * 
 */

function solution(sizes) {
    let arr = [0,0];
    for(let i =0; i < sizes.length;i++) {
        let [b,s] = sizes[i].sort((a,b) => b-a)
        if (b>arr[0]){
            arr[0]= b
        }
        if(s>arr[1]){
            arr[1] = s
        }
    }
    return arr[0]*arr[1];
}

/**
 * arr 배열을 생성후 sizes 배열의 길이만큼 for 반복문을 제작
 * 구조분해 할당을 통해 배열 [b,s]에 sizes의 요소값을 sort를 이용해 오름차순으로 바꿔준다
 * 
 * 그리고 if문을 이용해서 b가 arr배열의 첫번째 값보다 크다면 arr의 첫번째 값은 b이고
 * if 조건문에 s가 arr배열의 두번째 요소보다 크다면 arr의 두번째 요소는 s이다.
 * 
 * 그리고 위 for문을 돌리며  arr의 첫번째 요소와 두번째 요소를 곱해주면 답이 나온다.
 */