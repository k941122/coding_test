/**
 * 1로 만들기
 * 
 * 문제 설명
 * 
 * 정수가 있을 때, 짝수라면 반으로 나누고, 홀수라면 1을 뺀 뒤 반으로 나누면, 
 * 마지막엔 1이 됩니다. 예를 들어 10이 있다면 다음과 같은 과정으로 1이 됩니다.
 * 
 * 10 / 2 = 5
 * (5 - 1) / 2 = 4
 * 4 / 2 = 2
 * 2 / 2 = 1
 * 위와 같이 4번의 나누기 연산으로 1이 되었습니다.
 * 
 * 정수들이 담긴 리스트 num_list가 주어질 때, num_list의 모든 원소를 1로 만들기 위해서 
 * 필요한 나누기 연산의 횟수를 return하도록 solution 함수를 완성해주세요.
 * 
 * 제한 사항
 * 
 * - 3 ≤ num_list의 길이 ≤ 15
 * - 1 ≤ num_list의 원소 ≤ 30

 * 
 * 입출력 예시
 * 
 *      num_list	   result
 * [12, 4, 15, 1, 14]	11
 * 
 * 입출력 에시 설명
 * 
 * ex1) 12는 3번, 4는 2번, 15는 3번, 1은 0번, 14는 3번의 연산이 필요하기 때문에 
 *      총 11번의 연산이 필요합니다.
 * 
 */

/**
 * 문제 해석
 * 
 * num_lsit의 모든 정수 요소들이 1이 되기 위해서 필요한 나누기 연산 횟수 return
 * 
 *  정수 -> 짝수 => /2
 *         홀수 => (요소 - 1)/2 -> 홀수가 되면 -1로 짝수로 만든뒤 2로 나눠라
 * 
 * 몇단게에 걸쳐서 1이 되는가? 
 * 
 * 누적 시키기.
 * 
 * 이중 for문 ? 
 * 
 * 
 * 
 */


// ▼ 오답 코드
function solution (num_list) {
    let answer = 0;
    let num = 0;
    for (let i = 0; i<num_list.length;i++) {
        for (let j = 0; j <num_list[i];j++) {
            if (num === 1) {
                answer += j;

                break;
            }

            if (num %2 === 0) {
                num = num / 2;
            } else if( num %2 === 1) {
                num = (num-1)/2;
            }
        }
    }
    return answer
}

/**
 * 테스트 1
입력값 〉	[12, 4, 15, 1, 14]
기댓값 〉	11
실행 결과 〉	실행한 결괏값 0이 기댓값 11과 다릅니다.

 * 오답이 나왔다. 좀더 생각해 봐야 겠다.
 * 
 */


function solution (num_list) {
    let answer = 0;
    let num = 0;
    for (let i = 0; i<num_list.length;i++) {
        for (let j = 0; j <num_list[i];j++) {

            if (j === 0) num = num_list[i];

            if (num === 1) {
                answer += j;

                break;
            }

            if (num %2 === 0) {
                num = num / 2;
            } else if( num %2 === 1) {
                num = (num-1)/2;
            }
        }
    }
    return answer
}

/**
 * 오류를 찾아 냈다. num의 값은 0인데, 이 부분이 처음부터 0으로 설정되 있으면 
 * 아무리 다른 식을 게산해도 잘못된 계산이 나온다. 그래서 for문이 처음 시작할 때마다
 * j가 0이면 외부 for문의 num_list[i] 값을 넣게 했다.
 * 
 * 그랬더니 정상적으로 작동이 됬다.
 * 
 * 나누기 횟수를 누적시킬 answer 변수에 0을 할당하고
 * 나누기 값을 적용할 num의 값을 0으로 할당한 다음
 * 
 * 이중 for문을 작성 하였다. 외부 for 문은 num_list의 요소들을 순환하는 반복문 이고
 * 내부 for문은 num_list의 요소를 순회할 반복문 이다.
 * 
 * 내부 for문을 num_list의 요소 크기와 같아 질때 멈추게 하고
 * 
 * 외부 for문이 돌면서 내부 for문이 시작 될때마다.
 * 순회하는  외부 for문의 num_list의 요소 들의 값으로 num의 값을 초기화 하는 
 * if 문을 작성 했다.
 * 
 * 그리고 나누기 값이 1이라면 answer에 1을 누적 시키고 break를 이용해 loop를 끝나게 만드는
 * if문을 작성 했다.
 * 
 * if else if 문을 통해 num의 값이 짝수 인지 홀수 인지 를 구별한 후 
 * 해당 조건에 맞는 식을 게산해서 num에 값을 입력했다.
 * 
 * 내부 for문의 모든 코드들은 num_list의 요소의 크기 만큼 반복 되며,
 * 나는 값이 1이 되어서야 끝나고 총 loop한 횟수를 answer에 누적 시킨다. (j의 값)
 * 
 * 내부 for문이 끝나면 다시 외부 for문이 작동된다.
 * 
 * 마지막으로 외부 for문이 끝나면 답이 출력 된다.
 */