/**
 * 안전지대
 * 
 * 문제 설명
 * 
 * '다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 
 * 대각선 칸을 모두 위험지역으로 분류합니다.
image.png
지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 
지뢰가 없는 지역 0만 존재합니다.
지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 안전한 지역의 칸 수를 
return하도록 solution 함수를 완성해주세요.
 * 
 * 제한 사항
 * 
 * - board는 n * n 배열입니다.
 * - 1 ≤ n ≤ 100
 * - 지뢰는 1로 표시되어 있습니다.
 * - board에는 지뢰가 있는 지역 1과 지뢰가 없는 지역 0만 존재합니다.
 * 
 * 입출력 예시
 * 
 * board	                                                                                result
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0]]	16
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]]	13
[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]	0
 * 
 * 입출력 예시 설명
 * 
 * ex1) (3, 2)에 지뢰가 있으므로 지뢰가 있는 지역과 지뢰와 인접한 위, 아래, 좌, 우, 대각선 총 8칸은 위험지역입니다. 따라서 16을 return합니다.
 * 
 * ex2) (3, 2), (3, 3)에 지뢰가 있으므로 지뢰가 있는 지역과 지뢰와 인접한 위, 아래, 좌, 우, 대각선은 위험지역입니다. 따라서 위험지역을 제외한 칸 수 13을 return합니다.
 * 
 * ex3) 모든 지역에 지뢰가 있으므로 안전지역은 없습니다. 따라서 0을 return합니다.
 * 
 * 
 * 
 */

/**
 * 문제 해석
 * 
 * 폭탄이 있는 위치에서 한칸씩 대각선 위아래 왼쪽 오른족이 위험지대이다.
 * 
 * 위험지대를 뺀 나머지 안전 지대를 구하시오 (0) 갯수 구하기!
 * 
 * board 는 이차원 배열 
 * 
 * 주변 8개의 칸 을검사 
 * 
 * 지뢰가 없는 위치 카운트 - 안전 지역의 개수 증가!
 * 
 * 이중 for문 사용해서 지뢰가 있는 곳을 찾아야 한다.
 * 
 * board[i][j] = 1 이면 
 * 주변의 위험지역을 2로 만들어 준다.
 * 
 * 0인 지역은 카운트 해서 반환한다. 
 * 
 */


function solution(board) {
    const n = board.length
    const dx = [0,1,1,1,0,-1,-1,-1]
    const dy = [-1,-1,0,1,1,1,0,-1]
    
    for (let i=0;i<n;i++){
        for (let j=0;j<n;j++){
            if (board[i][j] !==1) continue
            for (let k=0; k<8;k++){
                const nx = j + dx[k]
                const ny = i + dy[k]
                
                if (0<=nx && nx<n && 0<=ny && ny<n && board[ny][nx]!==1){
                    board[ny][nx] = 2
                }
            }
        }
    }
    
    return board.reduce((a,c) => a+c.reduce((a,c)=> c===0?a+1:a ,0),0);
}

/**
 * 상수 n은 board의 길이를 담고 있고, 이는 2차원 배열의 한 변의 길이를 의미한다.
 * 
 * 상수 dx dy는 주변 8개의 칸(위험지역) 을 탐색하기 위한 방향 배열을 정하기 위해 만들었다.
 * dx는 열(가로) 방향 이동을 의미하고, dy는 행(세로) 방향의 이동을 의미한다. 
 * 이  배열들은 위험지역을 돌면서 각 칸의 좌표를 게산한다.
 * 
 * 이중 for문은 board의 배열을 순회 하기 위해서 사용 했다,
 * 
 * 내부 for문 에 작성된 if 문은 board[i][j] (board의 요소와, 요소 내부의 값)을 을 나타낸다.
 * 이 두 인덱스가 맞닿는 부분의 위치의 값이 1이 아니면 지뢰가 아니므로 다음 칸으로 넘어간다.
 * 
 * 내부의 내부 for문은 8만큼 순회하는데, 이는 현재 위치에서 8칸을 탐색하기 위해서다.
 * 
 * 
 */