/**
 * 삼각형의 완성조건 2
 * 
 * 문제 설명
 * 
 * 선분 세 개로 삼각형을 만들기 위해서는 다음과 같은 조건을 만족해야 합니다.
 * 
 * 가장 긴 변의 길이는 다른 두 변의 길이의 합보다 작아야 합니다.
 * 
 *삼각형의 두 변의 길이가 담긴 배열 sides이 매개변수로 주어집니다. 
 나머지 한 변이 될 수 있는 정수의 개수를 return하도록 solution 함수를 완성해주세요.
 * 
 * 제한 사항
 * 
 * - sides의 원소는 자연수입니다.
 * - sides의 길이는 2입니다.
 * - 1 ≤ sides의 원소 ≤ 1,000
 * 
 * 입출력 예시
 * 
 * sides	result
 * [1, 2]	1
 * [3, 6]	5
 * [11, 7]	13
 * 
 * 입출력 예시 설명
 * 
 * ex1) 두 변이 1, 2 인 경우 삼각형을 완성시키려면 나머지 한 변이 2여야 합니다. 
 *      따라서 1을 return합니다.
 * 
 * ex2) 가장 긴 변이 6인 경우
 *      될 수 있는 나머지 한 변은 4, 5, 6 로 3개입니다. 
 *      나머지 한 변이 가장 긴 변인 경우
 *      될 수 있는 한 변은 7, 8 로 2개입니다.
 *      따라서 3 + 2 = 5를 return합니다.
 * 
 * ex3) 가장 긴 변이 11인 경우
 *      될 수 있는 나머지 한 변은 5, 6, 7, 8, 9, 10, 11 로 7개입니다.
 *      나머지 한 변이 가장 긴 변인 경우
 *      될 수 있는 한 변은 12, 13, 14, 15, 16, 17 로 6개입니다.
 *      따라서 7 + 6 = 13을 return합니다.
 * 
 */

/**
 * 문제 해석
 * 
 * 가장 큰 요소의 값은 나머지 두 요소의 값의 합보다 작아야 한다.
 * 
 * 나머지 한 요소가 될수 있는 정수의(배열로 만들기) 개수(length)
 * 
 * 나머지 요소가 들어올수 있는 범위 
 * 
 * 큰 요소 - 작은요소 +1,start    큰요소 + 작은 요소 -1 ,end ->  사이의 요소들
 * 
 * 해당 부분을 배열화시키기 
 * 
 * Array.from() 메서드?
 * 
 * 
 * 
 */

function solution (sides) {

    let max = Math.max(...sides);
    let min = Math.min(...sides);
    let sum = sides.reduce((acc,cur) => acc + cur, 0);
    return sum - (max - min) -1;
}

/**
 * side의 가장 큰값과 작은 값을  Math.max 와 Math.min 메서드를 이용해 구하고
 * 
 * sum 변수에 reduce 메서드를 이용해서 sides의 모든 요소 값의 합을 구한다.
 * 
 * 그리고 위에서 게산한 값들을 이용해 삼각형의 변의 길이가 될수 있는 수들들 구해야 되는데,
 * 배열로 표현 하는 것 보보다는 삼각형 을 만들수 있는 세번재 변의 최소 최대 길이를 구해서
 * 그 값들을 빼는게 답이라고 생각했다.
 * 
 * 세번재 변을 구하는 최소 길이는 (max - min)에다가 +1을 하는 것이다. 
 * +1을 해주는 이유는 max-min은 정말 최소의 길이 임으로 삼각형이 형성 되지 않아서 +1을 해주는 것이다.
 * 
 * 세번재 변을 구하는 최대 길이는 max +min 에 -1을 해주는 것이다. 
 * 최댓값과 최소값을 더한뒤 -1을 해주면 최소 길이를 구하는 것과 같은 이유로 
 * 세번째 변의 최대 길이를 구할수 있다.
 * 
 * 이 최대값과 최소 값을 빼준뒤 나오는 값이 세번째 변이 될수 있는 요소들의 갯수 인데
 * -1을 해주는 이유는 최대 길이를 빼줘야 삼각형이 형성될수 있기 때문이다.
 * 
 * return 에 있는 sum(sides의 요소를 더해준 값) - ( max -min) -1 은 세번째 변이 될수 있는
 * 요소들의 갯수를 출력한다.
 * 
 */