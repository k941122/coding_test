/**
 * 컨트롤 제트
 * 
 * 문제 설명
 * 
 * 숫자와 "Z"가 공백으로 구분되어 담긴 문자열이 주어집니다. 
 * \문자열에 있는 숫자를 차례대로 더하려고 합니다. 이 때 "Z"가 나오면 
 * 바로 전에 더했던 숫자를 뺀다는 뜻입니다. 숫자와 "Z"로 이루어진 문자열 s가 주어질 때, 
 * 머쓱이가 구한 값을 return 하도록 solution 함수를 완성해보세요.
 * 
 * 제한 사항
 * 
 * - 1 ≤ s의 길이 ≤ 200
 * - -1,000 < s의 원소 중 숫자 < 1,000
 * - s는 숫자, "Z", 공백으로 이루어져 있습니다.
 * - s에 있는 숫자와 "Z"는 서로 공백으로 구분됩니다.
 * - 연속된 공백은 주어지지 않습니다.
 * - 0을 제외하고는 0으로 시작하는 숫자는 없습니다.
 * - s는 "Z"로 시작하지 않습니다.
 * - s의 시작과 끝에는 공백이 없습니다.
 * - "Z"가 연속해서 나오는 경우는 없습니다.
 * 
 * 입출력 예시
 * 
 *     s	        result
 * "1 2 Z 3"	      4
 * "10 20 30 40"	 100
 * "10 Z 20 Z 1"	  1
 * "10 Z 20 Z"	      0
 * "-1 -2 -3 Z"	      -3
 * 
 * 입출력 에시 설명
 * 
 * ex1) 본문과 동일합니다.
 * ex2) 10 + 20 + 30 + 40 = 100을 return 합니다.
 * ex3) "10 Z 20 Z 1"에서 10 다음 Z, 20 다음 Z로 10, 20이 지워지고 1만 더하여 1을 return 합니다.
 * ex4) 설명 생략
 * ex5) 설명 생략
 * 
 */

/**
 * 문제 해석
 * 
 * 해당 문자열을 배열로 바꿔야 된다.
 * 
 * 배열을 숫자는 더해주고 z가 나왔을 경우 
 * 
 * z
 * 
 */

function solution (s) {
    const stack = [];
    s.split(' ').forEach((target) => {
        if(target ==='Z') stack.pop();
        else stack.push(+target)
    })
    return stack.length ? stack.reduce((pre,cur) => pre +cur) : 0;
}

/**
 * stack이라는 빈배열을 만들고, pop과 push 메서드를 이용해 빈 배열을 채워 나가는 방식이다.
 * 
 * 배열 s를 split으로 문자열 공백 기준으로 나눈뒤, 배열로 만들고 forEach를 통해서 
 * 요소를 돌면서 z가 발견될 경우 if문을 이용해서 stack에 있는 요소를 제거한다. 
 * pop 메서드는 배열의 마지막 값을 제거 하기 때문에 z를 만나면 이전의 값을 제거한다.
 * 
 * z는 push 되지 않는게 z가 아니라면 else를 통해 push 해주라고 적었기 때문이다.
 * 
 * else 부분은 push를 통해서 배열의 맨마지막에 요소가 추된다. 해당 요소는 문자열 이지만 
 * +를 붙이면 숫자로 변환 되는 값이 push 된다.
 * 
 * return 부분에서 stack의 길이를 측정하고 배열에 요소가 없으면 (false) 0
 * 그게 아니라면 reduce를 통해서 배열의 요소들을 더해준 값을 출력합니다.
 */