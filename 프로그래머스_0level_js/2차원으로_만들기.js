/**
 * 2차원으로 만들기
 * 
 * 문제 설명
 * 
 * 정수 배열 num_list와 정수 n이 매개변수로 주어집니다. 
 * num_list를 다음 설명과 같이 2차원 배열로 바꿔 
 * return하도록 solution 함수를 완성해주세요.
 * 
 * num_list가 [1, 2, 3, 4, 5, 6, 7, 8] 로 길이가 8이고 n이 2이므로 
 * num_list를 2 * 4 배열로 다음과 같이 변경합니다. 
 * 2차원으로 바꿀 때에는 num_list의 원소들을 앞에서부터 
 * n개씩 나눠 2차원 배열로 변경합니다.
 * 
 *              num_list	n	         result
 * [1, 2, 3, 4, 5, 6, 7, 8]	2	[[1, 2], [3, 4], [5, 6], [7, 8]]
 * 
 * 제한 사항
 * 
 * - num_list의 길이는 n의 배 수개입니다.
 * - 0 ≤ num_list의 길이 ≤ 150
 * - 2 ≤ n < num_list의 길이
 * 
 * 입출력 예시 
 * 
 *          num_list	                n	            result
 * [1, 2, 3, 4, 5, 6, 7, 8]	            2	[[1, 2], [3, 4], [5, 6], [7, 8]]
 * [100, 95, 2, 4, 5, 6, 18, 33, 948]	3	[[100, 95, 2], [4, 5, 6], [18, 33, 948]]
 * 
 * 입출력 예시 설명
 * 
 * ex1) num_list가 [1, 2, 3, 4, 5, 6, 7, 8] 로 길이가 8이고 n이 2이므로 
 *      2 * 4 배열로 변경한 [[1, 2], [3, 4], [5, 6], [7, 8]] 을 return합니다.
 * 
 * ex2) num_list가 [100, 95, 2, 4, 5, 6, 18, 33, 948] 로 길이가 9이고 
 *      n이 3이므로 3 * 3 배열로 변경한 [[100, 95, 2], [4, 5, 6], [18, 33, 948]] 을 return합니다.
 * 
 */

/**
 * 문제 해석
 * 
 * num_list => 숫자형 배열
 * 
 * n 정수
 * 
 * 배열의 요소를 n 만큼 묶어서 2차원 배열로 만들어라.
 * 
 * map? 
 * 
 */

// ▼ 오답 코드 01
function solution (num_list,n) {
    let answer = [[]];
    let arr = num_list;

    for (let i = 0; i <= arr.length;i++) {
        answer += arr.slice(0,n+1);
    }
    return answer;
}

/**
 * 테스트 1
 * 입력값 〉	[1, 2, 3, 4, 5, 6, 7, 8], 2
 * 기댓값 〉	[[1, 2], [3, 4], [5, 6], [7, 8]]
 * 실행 결과 〉	실행한 결괏값 "1,2,31,2,31,2,31,2,31,2,31,2,31,2,31,2,31,2,3"이 기댓값 [[1,2],[3,4],[5,6],[7,8]]과 다릅니다.
 * 테스트 2
 * 입력값 〉	[100, 95, 2, 4, 5, 6, 18, 33, 948], 3
 * 기댓값 〉	[[100, 95, 2], [4, 5, 6], [18, 33, 948]]
 * 실행 결과 〉	실행한 결괏값 "100,95,2,4100,95,2,4100,95,2,4100,95,2,4100,95,2,4100,95,2,4100,95,2,4100,95,2,4100,95,2,4100,95,2,4"이 기댓값 [[100,95,2],[4,5,6],[18,33,948]]과 다릅니다.
 */


// ▼ 오답 코드 02
function solution (num_list,n) {
    let answer = [[]];
    let arr = num_list;

    for (let i = 0; i <= arr.length;i++) {
        answer.push(arr.slice(i,n));
    }
    return answer;
}

/**
 * push를 이용해서 answer 이중 배열에slice를 이용해서 넣어줬다.
 * 
 * 테스트 1
 * 입력값 〉	[1, 2, 3, 4, 5, 6, 7, 8], 2
 * 기댓값 〉	[[1, 2], [3, 4], [5, 6], [7, 8]]
 * 실행 결과 〉	실행한 결괏값 [[],[1,2],[2],[],[],[],[],[],[],[]]이 기댓값 [[1,2],[3,4],[5,6],[7,8]]과 다릅니다.
 * 테스트 2
 * 입력값 〉	[100, 95, 2, 4, 5, 6, 18, 33, 948], 3
 * 기댓값 〉	[[100, 95, 2], [4, 5, 6], [18, 33, 948]]
 * 실행 결과 〉	실행한 결괏값 [[],[100,95,2],[95,2],[2],[],[],[],[],[],[],[]]이 기댓값 [[100,95,2],[4,5,6],[18,33,948]]과 다릅니다.
 * 
 * 하지만 오답이 나왔다. 아마 slice 부분의 매개변수가 잘못 된것 같다.
 */

//▼ 오답  코드 03

function solution (num_list,n) {
    let answer = [];

    for (let i = 0; i <= num_list.length/n;i++) {
        answer.push(num_list.slice(i*n,i*n+n));
    }
    return answer;
}

/**
 * 답이 다 맞는데, 뒤에 빈 배열 요소가 하나더 생겼다.
 */

//▼ 정답 코드
function solution(num_list, n) {
    const answer = [];
    
    for(let i = 0; i < num_list.length / n; i++) {
        answer.push(num_list.slice(i * n, i * n + n))
    }
    
    return answer;
}

/**
 * 잘 살펴보니 for 문의 num_list의 길이를 반복할때 작거나 같을때 까지 반복해서
 * 빈 배열 요소가 생겼다. 작을때 까지만 으로 바꿔줬더니, 정상적으로 테스트가 통과 됬다.
 * 
 * for문 안의 asnwer 빈배열에 push 메서드를 이용해 원하는 요소를 집어 넣는데,
 * num_list 배열의 요소를 추출하기 위해 slice 메서드를 이용했다. 
 * 그리고 start index와 end index 를 넣는 매개변수 칸에 
 * i*n과 i*n+n을 넣었다.
 * 
 * for문에서 length 를 n으로 나눈 이유는 전체 배열의 길이를 n개씩 묶엇을때 그 절반이 되기 때문에
 * length /n으로 한것이다.
 * 
 * slice start와 end 부분에 i*n , i*n+n을 넣은 이유는 
 * 
 * for문 에서 i는 0이고 n은 num_list 배열의 요소를 묶어줄 값이다. 
 * 여기서 i는 for문이 루프 할때 마다 증감 연산자 식을 거쳐서 1씩 증가하게 된다.
 * 그래서 배열이 돌때마다  slice 의 시작점 역시 n 2n 3n 형식으로 옮겨진다.
 * 
 * end index 역시 마찬가지다. start index인 i*n에 +n을 해줘야 start index에 맞춰 n 만큼
 * 추출 할수 있다.
 */