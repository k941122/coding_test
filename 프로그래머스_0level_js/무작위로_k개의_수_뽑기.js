/**
 * 무작위로 k개의 수 뽑기
 * 
 * 문제 설명
 * 
 * 랜덤으로 서로 다른 k개의 수를 저장한 배열을 만드려고 합니다. 
 * 적절한 방법이 떠오르지 않기 때문에 일정한 범위 내에서 무작위로 수를 뽑은 후, 
 * 지금까지 나온적이 없는 수이면 배열 맨 뒤에 추가하는 방식으로 만들기로 합니다.
 * 
 * 이미 어떤 수가 무작위로 주어질지 알고 있다고 가정하고, 
 * 실제 만들어질 길이 k의 배열을 예상해봅시다.
 * 
 * 정수 배열 arr가 주어집니다. 문제에서의 무작위의 수는 arr에 저장된 순서대로 주어질 
 * 예정이라고 했을 때, 완성될 배열을 return 하는 solution 함수를 완성해 주세요.
 * 
 * 단, 완성될 배열의 길이가 k보다 작으면 나머지 값을 전부 -1로 채워서 return 합니다.
 * 
 * 제한 사항
 * 
 * - 1 ≤ arr의 길이 ≤ 100,000
 *   0 ≤ arr의 원소 ≤ 100,000
 * 
 * - 1 ≤ k ≤ 1,000
 * 
 * 입출력 예시 
 * 
 * arr	                k	result
 * [0, 1, 1, 2, 2, 3]	3	[0, 1, 2]
 * [0, 1, 1, 1, 1]	    4	[0, 1, -1, -1]
 * 
 * 입출력 예시 설명
 * 
 * EX1) 앞에서부터 서로 다른 k개의 수를 골라내면 [0, 1, 2]가 됩니다. 따라서 
 *     [0, 1, 2]를 return 합니다.
 * 
 * EX2) 서로 다른 수의 개수가 2개 뿐이므로 서로 다른 수들을 앞에서부터 
 *      차례대로 저장한 [0, 1]에서 이후 2개의 인덱스를 -1로 채워넣은 [0, 1, -1, -1]을 return 합니다.
 * 
 */

/**
 * 문제 해석
 * 
 * 정수배열 arr
 * 
 * k 개의 개수 
 * 
 * 새로운 배열만들기
 * 
 * 새로운 배열에 있는 숫자 무시
 * 
 * 새로운 벼열에 없는 숫자 추가
 * 
 * 새로운 배열의 길이가 적으면 k보다, 그 길이만큼 -1 넣기
 * 
 * for 문 arr 길이 만큼 
 * 
 * if문 사용 answer에 arr요소가 없는지 
 * push arr 요소
 * 
 * result 길이가 k랑 같으면 if문 
 * break
 * 
 * while 문으로 result의 길이가 k 만큼 일때 까지 반복
 * 
 * push -1
 * 
 */

function solution(arr, k) {
    let answer = [];
    for (let i = 0; i < arr.length; i++) {
        if (!answer.includes(arr[i])) {
            answer.push(arr[i]);
        }
        if (answer.length === k) {
            break;
        }
    }
    while (answer.length < k) {
        answer.push(-1);
    }
    return answer;
}

/**
 * arr의 배열을 순회 해야 함으로 for문을 arr.length 만큼 돌아서 
 * arr의 배열의 요소를 순회한다. 
 * 
 * 내부에 if문을 이용해서 answer 에 include 메서드를 이용해서 arr[i]가 없다면
 * answer에 push  메서드를 이용해 arr의 현재 요소를 순차적으로 넣어준다.
 * 
 * 그리고 if 문의 조건에서 asnwer의 길이가 k와 같아지면 break를 이용해 멈춰준다.
 * 
 * 만약 생성된 asnwer 배열이 k보다 길이가 짧을수도 있기 때문에 
 * 해당 answer 배열의 길이가 k 보다 커질때 까지 while 문을 반복 시키면서
 * 
 * answer에 -1을 push 해 준다.
 */