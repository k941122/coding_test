/**
 * 순서 쌍의 개수
 * 
 * 문제 설명
 * 
 * 순서쌍이란 두 개의 숫자를 순서를 정하여 짝지어 나타낸 쌍으로 (a, b)로 표기합니다. 
 * 자연수 n이 매개변수로 주어질 때 두 숫자의 곱이 n인 자연수 순서쌍의 개수를 
 * return하도록 solution 함수를 완성해주세요.
 * 
 * 제한 사항
 * - 1 ≤ n ≤ 1,000,000
 * 
 * 입출력 예시
 * 
 *  n	result
 *  20	  6
 *  100	  9
 * 
 * 입출력 예시 설명
 * 
 * ex1) n이 20 이므로 곱이 20인 순서쌍은 (1, 20), (2, 10), (4, 5), (5, 4), 
 *      (10, 2), (20, 1) 이므로 6을 return합니다.
 * 
 * ex2) n이 100 이므로 곱이 100인 순서쌍은 (1, 100), (2, 50), (4, 25), (5, 20), 
 *      (10, 10), (20, 5), (25, 4), (50, 2), (100, 1) 이므로 9를 return합니다.
 */

/**
 * 문제 해석
 * 
 * n의 순서 쌍을 배열로 나타낸후 길이를 출력할것.
 * 
 * n의 순서 쌍 = 임의의 두 정수 a,b를 곱해서 n이 나오는 것!
 * 
 * 1. n을 배열 형식으로 만들어야 될듯?
 * 
 * 2. 배열로 만든 n을 일정 조건하에서 return 시키기 위해  filter가 필요할듯 하다.
 * 
 * 
 */


function solution (n) {
    let arr = [n];
    return arr.slice(0).map((acc,cur) => cur%2 === 0? ++acc : 0,0);
}

/**
 * 테스트 1)
 * 입력값 〉	20
 * 기댓값 〉	6 
 * 실행 결과 〉	실행한 결괏값 [21]이 기댓값 6과 다릅니다.
 * 
 * 테스트 2)
 * 입력값 〉	100
 * 기댓값 〉	9
 * 실행 결과 〉	실행한 결괏값 [101]이 기댓값 9과 다릅니다.
 * 
 * 단순히 n을 배열화 시키고 slice 메서드로 0을 추출한 후, map 으로 배열을 생성 하려고 했으나
 * 그게 아니었다. map은 새로운 배열을 생성하는게 아닌, 원래 있는 배열의 요소에 다른 숫자를 합하거나
 * 곱하는 기능이었다.
 */

function solution (n) {
    return Array.from({length:n+1},(v,i)=>i).filter((i)=> n%i === 0).length;
}

/**
 * 순서 쌍의 개수 는 나누어 떨어지게 하는 약수를 구하라는 의미이다.
 * 
 * 그러므로 n에 인덱스를 나누었을때 0으로 나누어 떨어지는 요소들을 구하면 된다.
 * 
 * Array.from() 메서드를 이용해 길이와 인덱스 요소를 만들어 준다. 
 * 
 * length는 길이 n은 매개변수인 정수, +1은 n에 1을 더해 주는 것인데, 
 * +1을 해주는 이유는 요소의 index는 0부터 시작하기 때문에 실제로 배열의 길이를 구하려면
 * n+1을 해줘야 정상적인 배열의 길이가 출력된다. ex)n=7 , [0,1,2,3,4,5,6]
 * 
 * 만들어진 배열에 filter를 이용해서 조건에 맞는 요소만 출력하는데,
 * 위에서 처럼 n의 약수를 구하는 것이기 때문에 n을 나누어 떨어지게 하는 요소를 골라야 된다.
 * 
 * n%i === 0 인 요소만 걸러서 출력한 배열을 .length를 이용해 그 갯수를 나오게 한다.
 * 
 */