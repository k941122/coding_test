/**
 * 두 수의 합
 * 
 * 문제 설명
 * 
 * 0 이상의 두 정수가 문자열 a, b로 주어질 때, a + b의 값을 문자열로 
 * return 하는 solution 함수를 작성해 주세요.
 * 
 * 제한 사항
 * 
 * - 1 ≤ a의 길이 ≤ 100,000
 * - 1 ≤ b의 길이 ≤ 100,000
 * - a와 b는 숫자로만 이루어져 있습니다.
 * - a와 b는 숫자로만 이루어져 있습니다.
 * 
 * 입출력 예시
 * 
 *   a	                             b	                    result
 * "582"	                       "734"	                "1316"
 * "18446744073709551615"	"287346502836570928366"	"305793246910280479981"
 * "0"	                            "0"	                      "0"
 * 
 * 입출력 예시 설명
 * 
 * ex1) 예제 1번의 a, b는 각각 582, 734이고 582 + 734 = 1316입니다. 따라서 "1316"을 return 합니다.
 * ex2) 예제 2번의 a, b는 각각 18446744073709551615, 287346502836570928366이고 18446744073709551615 + 287346502836570928366 = 305793246910280479981입니다. 따라서 "305793246910280479981"을 return 합니다.
 * ex3) 예제 3번의 a, b는 각각 0, 0이고 0 + 0 = 0입니다. 따라서 "0"을 return 합니다.
 * 
 */

/**
 * 문제 해석
 * 
 * 문자형 숫자들을 숫자형으로 바꾸기 -> ab를 더하기
 * 
 */

function solution (a,b) {
    let sum = BigInt(a)+BigInt(b);
    return sum.toString();
}

/**
 * 맨처음 Number() 메서드를 이용해서 게산 했을때 
 * 테스트 2번에서 error 가 났다. 이유를 알아보니, Number 메서드는 안정성 기준 때문에
 * 일정 범위의 정수를 넘어서면 안전하게 계산 할수 있는 범위 내에서 멈춘다는 것이다.
 * 
 * 그래서 다른 메서드를 알아보니 BigInt 라는 메서드가 세로 나왔다는걸 알게 되었고,
 * BigInt는 Number 메서드와 달리 안전 기준이 없고 정밀도를 높힌 메서드 였다.
 * 
 * BigInt를 통해서 계산하니 정확한 값이 나왔다.
 */