/**
 * 직사각형 넓이 구하기
 * 
 * 문제 설명
 * 
 * 2차원 좌표 평면에 변이 축과 평행한 직사각형이 있습니다. 
 * 직사각형 네 꼭짓점의 좌표 [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]가 담겨있는 
 * 배열 dots가 매개변수로 주어질 때, 직사각형의 넓이를 
 * return 하도록 solution 함수를 완성해보세요.
 * 
 * 제한 사항
 * 
 * - dots의 길이 = 4
 * - dots의 원소의 길이 = 2
 * - -256 < dots[i]의 원소 < 256
 * - 잘못된 입력은 주어지지 않습니다.
 * 
 * 입출력 예시
 * 
 *               dots	               result
 * [[1, 1], [2, 1], [2, 2], [1, 2]]	      1
 * [[-1, -1], [1, 1], [1, -1], [-1, 1]]	  4
 * 
 * 입출력 에시 설명
 * 
 * ex1) 좌표 [[1, 1], [2, 1], [2, 2], [1, 2]] 를 꼭짓점으로 갖는 직사각형의 가로, 
 *      세로 길이는 각각 1, 1이므로 직사각형의 넓이는 1 x 1 = 1입니다.
 * 
 * ex2) 좌표 [[-1, -1], [1, 1], [1, -1], [-1, 1]]를 꼭짓점으로 갖는 직사각형의 가로, 
 *      세로 길이는 각각 2, 2이므로 직사각형의 넓이는 2 x 2 = 4입니다.
 * 
 * 
 */

/**
 * 문제 해석
 * 
 * 이차원 배열에 네 꼭짓점의 좌표가 주어짐 
 * 이 직사각형의 넓이를 계산
 * 
 * sort 메서드를 이용해 1차원 배열의 인덱스가 0인 부분을 비교해서 정렬
 * 
 * x축 값이 작은것들이 앞으로 오게
 * 
 * 사각형 가로 세로 길이
 * 
 * 인덱스가 0,1 x축이 같기 때문에 y축 길이 구할수 있음
 * 인덱스가 0,2 는 y축 값이 다르든 말든 x축 구할수 있음 
 * 
 */

function solution(dots) {
    dots.sort((a,b) => a[0]-b[0]);

    const oneSide = Math.abs(dots[0][1] - dots[1][1]);
    const otherSide = Math.abs(dots[0][0] - dots[2][0]);
    return oneSide*otherSide;
}

/**
 * 네 꼭짓점 좌표를 담은 배열 dots 를 매개변수
 * 
 * dots의 x배열 좌표를 기준으로 sort 메서드를 이용해 오름 차순 정렬을 해준다. 
 * x좌표를 기준으로 작은것 부터 큰 순서대로 배열이 정렬된다.
 * 
 * 이 정렬된 배열을 바탕으로 세로의 길이를 구하기 위해 dots의 첫번째 점 dot[0]과 
 * 두번째 점 dots[1]을 이용한다. 이 두점의 y축 좌표 차이를 게산해서 직사각형의 
 * 세로 길이를 구한다. 
 * 
 * 위에서 dots[0][1]의 해석은 앞쪽의 [0]은 일차원 배열의 요소이고 
 * 뒤의 [1]은 이차원 배열의 요소 이다.
 * 
 * 가로의 길이를 구하기 위해서는 dots의 일차원 배열에서 가장 작은 x값과 세번째 순서인
 * x값의 이차원 배열의 첫번재 요소를 빼주면 된다.
 * 
 * 구한 가로 세로의 길이를 곱해주면 답이 나온다.
 * 
 * 
 */